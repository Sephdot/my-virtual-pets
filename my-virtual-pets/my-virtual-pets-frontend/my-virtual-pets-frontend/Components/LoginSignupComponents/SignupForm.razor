@using System.Net
@using my_virtual_pets_class_library.DTO
@inject NavigationManager NavMan 
@inject AuthenticationStateProvider AuthState
@rendermode InteractiveServer

<div class="container">
<EditForm FormName="Login" Model="@userDetails" OnInvalidSubmit="HandleInvalidSubmit" OnValidSubmit="HandleValidSubmit">
    <h3 class="pixeltext">Sign-up Form</h3>
    <DataAnnotationsValidator/>

    <div class="row">
        <div class="col-sm-12 col-md-6  input form-group">
            <label for="InputFirstName">First Name:</label>
            <InputText id="InputFirstName" class="form-control" @bind-Value="@userDetails.FirstName"/>
            <ValidationMessage For="@(() => userDetails.FirstName)"/>
        </div>

        <div class="col-sm-12 col-md-6 input form-group">
            <label for="InputLastName">Last Name:</label>
            <InputText id="InputLastName" class="form-control" @bind-Value="@userDetails.LastName"/>
            <ValidationMessage For="@(() => userDetails.LastName)"/>
        </div>
    </div>

    <div style="height:8px">
    </div>
    
    <div class="row">
    <div class="col-sm-12 col-md-6 input form-group">
        <label for="InputEmail">Email:</label>
        <InputText id="InputEmail" class="form-control" @bind-Value="@userDetails.Email"/>
        <ValidationMessage For="@(() => userDetails.Email)"/>
    </div>
    
    <div class="col-sm-12 col-md-6 input form-group">
        <label for="InputUsername">Username:</label>
        <input type="text" id="InputUsername" class="form-control" @bind="Username" @bind:event="oninput"/>
        <ValidationMessage For="@(() => userDetails.Username)"/>
        <div style="height:8px">
            <p style="color: @color">@UsernameTaken</p>
        </div>
    </div>
    </div>

    <div class="row">
           <div class="col-sm-12 col-md-6 input form-group">
            <label for="InputPassword">Password:</label>
            <InputText id="InputPassword" type="password" class="form-control" @bind-Value="@userDetails.Password"/>
            <ValidationMessage For="@(() => userDetails.Password)"/>
            </div>

            <div class="col-sm-12 col-md-6 input form-group">
                <label for="InputComparePassword">Confirm Password:</label>
                <InputText id="InputComparePassword" type="password" class="form-control" @bind-Value="@userDetails.ComparePassword"/>
                <ValidationMessage For="@(() => userDetails.ComparePassword)"/>
            </div>

        <div style="height:8px">
        </div>
            
    </div>

    <div class="row">
        <p style="font-size:10px">By submitting this form you are agreeing to our service and privacy policy</p>
    </div>
    
    <h6 style="color:red">@Feedback</h6>
    
    <button id="input registerbutton" class="btn btn-light d-block mx-auto mt-4" type="submit">Enter the doghouse</button>

</EditForm>
</div>

@code {
    
    public NewUserDTO userDetails { get; set; } 
    
    private string username = "";

    public string Username
    {
        get => username;
        set
        {
            username = value;
            userDetails.Username = username;
            CheckUsernameAsync();
        }
    }
    
    public string Feedback { get; set; }
    
    public string UsernameTaken { get; set; }
    
    public string color { get; set; } = "green";
     
    protected override void OnInitialized()
    {
        userDetails = new NewUserDTO();
        userDetails.GDPRPermissions = true; 
    }

    public async Task CheckUsernameAsync()
    {
        var webclient = new BackendClient<BoolReturn>($"api/User/CheckUsername/{Username}", AuthState);
        BoolReturn UsernameCheck = await webclient.GetRequest();
        if (UsernameCheck != null)
        {
            if (UsernameCheck.IsTrue)
            {
                UsernameTaken = "Username is taken";
                color = "red";
            }
            else
            {
                if (Username == "")
                {
                    UsernameTaken = "";
                }
                else
                {
                    UsernameTaken = "Username is free";
                    color = "green";
                }
            }
            StateHasChanged();
        }
    }
    
    public void HandleInvalidSubmit()
    {
        Feedback = "Oops let's try that again!"; 
    }

    public async Task HandleValidSubmit()
    {
        var webclient = new BackendClient<NewUserDTO>("api/user/register", AuthState);
        var response = await webclient.PostRequest(userDetails);
        if (response.StatusCode == HttpStatusCode.Created)
        {
            userDetails = new NewUserDTO();
            Username = "";
            NavMan.Refresh(true);
        } else if (response.StatusCode == HttpStatusCode.BadRequest)
        {
            Feedback =  await response.Content.ReadAsStringAsync();  
        }
    }

}